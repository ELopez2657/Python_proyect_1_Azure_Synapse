{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "project01erick"
		},
		"project01erick-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'project01erick-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:project01erick.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"HttpServer1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://www.kaggle.com/datasets/kanchana1990/real-estate-data-uae/download?datasetVersionNumber=1"
		},
		"HttpServer2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://www.kaggle.com/datasets/sriharshaeedala/financial-fraud-detection-dataset/download?datasetVersionNumber=1"
		},
		"city_safety_seattle_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'city_safety_seattle'"
		},
		"intento 2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://www.kaggle.com/datasets/kanchana1990/real-estate-data-uae/download?datasetVersionNumber=1"
		},
		"lego_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://www.kaggle.com/datasets/sriharshaeedala/financial-fraud-detection-dataset/"
		},
		"project01erick-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dls01project.dfs.core.windows.net"
		},
		"prueba_final_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://www.kaggle.com/datasets/sriharshaeedala/financial-fraud-detection-dataset"
		},
		"sample-diabetes_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'sample-diabetes'"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Ccc')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_mgv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "download?datasetVersionNumber=1"
							},
							{
								"name": "Destination",
								"value": "container02//jo"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 2
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_mgv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_mgv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-24T18:48:33Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_mgv')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_mgv')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy002')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_23n",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "/download?datasetVersionNumber=1"
							},
							{
								"name": "Destination",
								"value": "container02//nuevo_02"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 2
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_23n",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_23n",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-24T17:54:32Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_23n')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_23n')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_0uc')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_0uc",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "container02/external_table/prueba02"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_0uc",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_0uc",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-23T19:08:13Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_0uc')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_0uc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_bdz')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_bdz",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "container02//new_data_link"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_bdz",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_bdz",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-23T18:50:16Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_bdz')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_bdz')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_kso')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_kso",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "container02//prueba"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 2
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_kso",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_kso",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-24T04:54:04Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_kso')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_kso')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_wkp')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_wkp",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "container02//nuevo"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_wkp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_wkp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-24T04:57:23Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_wkp')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_wkp')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_0uc')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "project01erick-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "prueba02",
						"folderPath": "external_table",
						"fileSystem": "container02"
					},
					"compression": {
						"type": "GZip"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/project01erick-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_23n')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "project01erick-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "nuevo_02",
						"fileSystem": "container02"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/project01erick-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_bdz')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "project01erick-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "new_data_link",
						"fileSystem": "container02"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/project01erick-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_kso')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "project01erick-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "prueba",
						"fileSystem": "container02"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/project01erick-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_mgv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "project01erick-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "jo",
						"fileSystem": "container02"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/project01erick-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_wkp')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "project01erick-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "nuevo",
						"fileSystem": "container02"
					},
					"columnDelimiter": ",",
					"compressionCodec": "gzip",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/project01erick-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_0uc')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "intento 2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/intento 2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_23n')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "prueba_final",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "/download?datasetVersionNumber=1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": null
				},
				"schema": [
					{
						"name": "<head>",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/prueba_final')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_bdz')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"compression": {
						"type": "GZip"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/HttpServer1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_kso')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": null
				},
				"schema": [
					{
						"name": "<head>",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/HttpServer2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_mgv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lego",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "download?datasetVersionNumber=1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": null
				},
				"schema": [
					{
						"name": "<head>",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/lego')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_wkp')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "<!DOCTYPE html>",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/HttpServer2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HttpServer1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HttpServer2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer2_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/city_safety_seattle')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('city_safety_seattle_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/intento 2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('intento 2_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lego')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('lego_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/project01erick-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('project01erick-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/project01erick-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('project01erick-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/prueba_final')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('prueba_final_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sample-diabetes')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('sample-diabetes_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE \n\nCREATE EXTERNAL TABLE [dbo].[nueva]\nWITH\n(\n\tLOCATION ='/external_table/',\n    DATA_SOURCE = EDS_pizza,\n    file_format = EFF_pizza\n) as\nselect * \nfrom  OPENROWSET (\nBULK 'abfss://container02@dls01project.dfs.core.windows.net/pizzas/order_details.csv',\n--data_source = 'EDS_pizza',\nFORMAT = 'csv',\nPARSER_VERSION = '2.0',\nHEADER_ROW = TRUE\n) as ext;\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "pizza_db",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'https://dls01project.dfs.core.windows.net/container03/insurance_data/insurance.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Insurace_db",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/conexions db_pizza')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "create database pizza_db;\nuse pizza_db;\n\n--External data source\ncreate EXTERNAL DATA SOURCE EDS_pizza\nwith(\n    Location ='https://dls01project.dfs.core.windows.net/project01erick/',\n    CREDENTIAL= SynapseUserIdentity04,       \n);\n\n--drop EXTERNAL DATA SOURCE EDS_pizza;\n\n--External format\ncreate EXTERNAL FILE FORMAT EFF_pizza \nwith(\n    FORMAT_TYPE = DELIMITEDTEXT\n);\n\n--Schema que es dominada por el Owen of data base\ncreate SCHEMA DLW AUTHORIZATION dbo\ngo;\n\n-- Cambiar formato de datos \nALTER DATABASE pizza_db collate Latin1_General_100_BIN2_UTF8;\n\n-----------------------------------------\n--Security\ncreate master key ENCRYPTION by PASSWORD = '0979006421contraseña'\n\nCREATE DATABASE SCOPED CREDENTIAL SynapseUserIdentity01 with IDENTITY = 'User Identity'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "pizza_db",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/crear_tabla_externa')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "use pizza_db;\n\ncreate EXTERNAL data SOURCE prueba_03 with(\n    LOCATION = 'https://dls01project.dfs.core.windows.net/container02/'  --carpeta principal donde se ubicara\n); go;\n\n\ncreate EXTERNAL file FORMAT format03\n    with (\n            FORMAT_TYPE = DELIMITEDTEXT\n            --FORMAT_OPTIONS (\n        --FIELD_TERMINATOR = ';')   NO hace falta especificar si es ','\n    ); go;\n\n\n--drop EXTERNAL DATA SOURCE salesdata_es;\n--drop EXTERNAL FILE FORMAT format03\n\n\n-----------------------------------------\n-----------------------------------------\n\n\n-----Se puede expecificar Schemas .dbo .sto .dlw ------\nCREATE EXTERNAL TABLE prueba05\n\tWITH(\n\t\tLOCATION = '/final_final02/',  --nombre de la carpeta que se crea dentro de la principal\n\t\tDATA_SOURCE = prueba_03,\n\t\tFILE_FORMAT = format03\n\t)\nas \nselect *\nfrom \nOPENROWSET(BULK 'abfss://container01@dls01project.dfs.core.windows.net/files/CityList.csv', --de donde se saca la inofrmacion\n                FORMAT = 'csv',\n\t\t\t\tPARSER_VERSION = '2.0',\n\t\t\t\tHEADER_ROW = TRUE\n\t\t\t\t) as nueva_tabla\n; \n\n--DROP EXTERNAL TABLE prueba04\n\nselect name,lon,lat from  prueba05;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "pizza_db",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/external tabla pizza')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "create SCHEMA STO AUTHORIZATION dbo\ngo;\n\ncreate master key ENCRYPTION by PASSWORD = '1999_Magodeoz'\nCREATE DATABASE SCOPED CREDENTIAL SynapseUserIdentity07 \nwith IDENTITY='sqladminuser'\n\ndrop CREDENTIAL SynapseUserIdentity0 \n\nCREATE DATABASE SCOPED CREDENTIAL SynapseUserIdentity04 \nWITH IDENTITY='SHARED ACCESS SIGNATURE',  \nSECRET = 'QY3RYeSp2Hiz5+3hfaA5Y2NMBBHTp1QAmjPiMT2m2Hd3tlHWaaSdhz7xm/8QEQ1zLCiMhgRt3s7t+AStFx9kFA==';\n\n\n\n\n--CREATE EXTERNAL TABLE STO.DimOrderDetails \nCREATE EXTERNAL TABLE STO.Prueba\nwith (\n    LOCATION ='/external_table/',\n    DATA_SOURCE = EDS_pizza,\n    file_format = EFF_pizza\n) AS\nselect * \nfrom  OPENROWSET (\nBULK 'abfss://container02@dls01project.dfs.core.windows.net/pizzas/order_details.csv',\n--data_source = 'EDS_pizza',\nFORMAT = 'csv',\nPARSER_VERSION = '2.0',\nHEADER_ROW = TRUE\n) as ext;\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "pizza_db",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/external table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE EXTERNAL TABLE product_sales_total\n\tWITH(\n\t\tLOCATION = '/container01/files/CityList.csv',\n\t\tDATA_SOURCE = salesdata_es,\n\t\tFILE_FORMAT = my_format\n\t)\nas \nselect *\nfrom \nOPENROWSET(BULK 'https://dls01project.dfs.core.windows.net/container01/files/CityList.csv',\n                FORMAT = 'csv',\n\t\t\t\tPARSER_VERSION = '2.0',\n\t\t\t\tHEADER_ROW = TRUE\n\t\t\t\t) as nueva_tabla\n; \n\n\nselect * from  product_sales_total;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales",
						"poolName": "Built-in"
					},
					"resultLimit": -1
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/location y file format esternal table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE DATABASE sales\n    collate Latin1_General_100_BIN2_UTF8;\nGo;\n\nuse sales;\n\ncreate EXTERNAL data SOURCE salesdata_es with(\n    LOCATION = 'https://dls01project.dfs.core.windows.net/container01/files/'\n);\ngo;\n\ncreate EXTERNAL file FORMAT my_format\n    with (\n            FORMAT_TYPE = DELIMITEDTEXT\n    );\n    go;\n\n\ndrop EXTERNAL DATA SOURCE salesdata_es;\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales",
						"poolName": "Built-in"
					},
					"resultLimit": -1
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mental pruebas external')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    age,\n    count(age) as total\nFROM\n    OPENROWSET(\n        BULK 'https://dls01project.dfs.core.windows.net/container04/mental_health_data/mental_health.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\nGROUP by Age \norder by total desc;\n\n\n-- This is auto-generated code\nSELECT\n        *\nFROM\n    OPENROWSET(\n        BULK 'https://dls01project.dfs.core.windows.net/container04/mental_health_data/mental_health.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "mental_health_db",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mental_health_ext_tab')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "---------------------------------Depression and Mental Health Data Analysis----------------------------------------\n\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseDelimitedTextFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseDelimitedTextFormat] \n\tWITH ( FORMAT_TYPE = DELIMITEDTEXT ,\n\t       FORMAT_OPTIONS (\n\t\t\t FIELD_TERMINATOR = ',',\n\t\t\t FIRST_ROW = 2,\n\t\t\t USE_TYPE_DEFAULT = FALSE\n\t\t\t))\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'container04_dls01project_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [container04_dls01project_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://container04@dls01project.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE dbo.mental_health_ext_tab (\n\t[Age] nvarchar(40),\n\t[Gender] nvarchar(400),\n\t[Occupation] nvarchar(400),\n\t[Days_Indoors] nvarchar(400),\n\t[Growing_Stress] nvarchar(400),\n\t[Quarantine_Frustrations] nvarchar(400),\n\t[Changes_Habits] nvarchar(400),\n\t[Mental_Health_History] nvarchar(400),\n\t[Weight_Change] nvarchar(400),\n\t[Mood_Swings] nvarchar(400),\n\t[Coping_Struggles] nvarchar(400),\n\t[Work_Interest] nvarchar(400),\n\t[Social_Weakness] nvarchar(400)\n\t)\n\tWITH (\n\tLOCATION = 'mental_health_data/mental_health.csv',\n\tDATA_SOURCE = [container04_dls01project_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDelimitedTextFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.mental_health_ext_tab\nGO;\n\n\n--Age distribution\nselect \n\tAge,\n\tCount(age) as total\nfrom mental_health_ext_tab\ngroup by [Age]\norder by total desc;\n\n--Gender and Age Distribution\nselect\n\tGender,\n\tAge,\n\tCOUNT(*) as total\nfrom mental_health_ext_tab\nGROUP by gender, [Age] \norder by total desc;\n\n-- Most common occupation\nselect \n\t[Occupation],\n\tCOUNT([Occupation]) as Total\nFROM mental_health_ext_tab\nGROUP by [Occupation]\nORDER by total DESC;\n\n--Mental Health History \nSELECT\n\t[Mental_Health_History],\n\tCOUNT([Mental_Health_History]) as Total\nFrom mental_health_ext_tab\nGROUP by [Mental_Health_History]\nORDER by Total DESC;\n\n\n--Distribution of Work Interest\nSELECT\n\t[Work_Interest],\n\tCOUNT([Work_Interest]) as Total\nFrom mental_health_ext_tab\nGROUP by [Work_Interest]\nORDER by Total DESC;\n\n-- Relationship between losing interest in work and problems coping with stress\nSELECT\n\t[Work_Interest] as Losing_interest_in_work,\n\t[Coping_Struggles] as Problems_coping_with_stress,\n\tCOUNT(*) as Total\nFrom mental_health_ext_tab\nGROUP by [Coping_Struggles], [Work_Interest]\nORDER by Total DESC;\n\n\n--Distribution of Coping Struggles\nSELECT\n\t[Coping_Struggles],\n\tCOUNT([Coping_Struggles]) as Total\nFrom mental_health_ext_tab\nGROUP by [Coping_Struggles]\nORDER by Total DESC;\n\n\n-- Relationship between professions and problems coping with stress\nSELECT\n\t[Occupation],\n\t[Coping_Struggles],\n\tCOUNT(*) as Total\nFrom mental_health_ext_tab\nwhere [Coping_Struggles] = 'Yes'\nGROUP by [Coping_Struggles], [Occupation]\nORDER by Total DESC;\n\n\n--Distribution of Quarantine Frustrations by Mood Swings\nSELECT\n\t[Mood_Swings],\n\t[Quarantine_Frustrations],\n\tCOUNT(*) as Total\nFROM mental_health_ext_tab\nGROUP by [Mood_Swings],[Quarantine_Frustrations]\nORDER by Total DESC;\n\n-- Realtion between Weight Change and Quarantine Frustrations\nSELECT\n\t[Weight_Change],\n\t[Quarantine_Frustrations],\n\tCOUNT(*) as Total\nFROM mental_health_ext_tab\nWHERE [Weight_Change] not like 'Maybe' \nGROUP by [Weight_Change],[Quarantine_Frustrations]\nORDER by Total DESC;\n\n\n-- Realtion between Weight Change and Mood Swings\nSELECT\n\t[Weight_Change],\n\t[Mood_Swings],\n\tCOUNT(*) as Total\nFROM mental_health_ext_tab\nGROUP by [Weight_Change],[Mood_Swings]\nORDER by Total DESC;\n\n\n--Distribution of Mood Swings\nSELECT\n\t[Mood_Swings] as Humor_Changes,\n\tCOUNT([Mood_Swings]) as Total\nFrom mental_health_ext_tab\nGROUP by [Mood_Swings]\nORDER by Total DESC;\n\n--Distribution of Weight Change\nSELECT\n\t[Weight_Change],\n\tCOUNT([Weight_Change]) as Total\nFrom mental_health_ext_tab\nGROUP by [Weight_Change]\nORDER by Total DESC;\n\n--Distribution of Quarantine Frustrations\nSELECT\n\t[Quarantine_Frustrations],\n\tCOUNT([Quarantine_Frustrations]) as Total\nFrom mental_health_ext_tab\nGROUP by [Quarantine_Frustrations]\nORDER by Total DESC;\n\n\n--Distribution of Days_Indoors\nSELECT\n\t[Days_Indoors] as Days_without_going_out,\n\tCOUNT(*) as Total\nFrom mental_health_ext_tab\nGROUP by [Days_Indoors] \nORDER by Total DESC;\n\n\n--Relationships Social Weakness and daydays without going out\nSELECT\n    [Days_Indoors],\n\t[Social_Weakness],\n\tCOUNT(*) as Total\nFrom mental_health_ext_tab\nwhere [Social_Weakness] not like 'Maybe'\nGROUP by [Days_Indoors],[Social_Weakness] \nORDER by Total DESC;\n\n-- https://www.kaggle.com/datasets/shashwatwork/depression-and-mental-health-data-analysis/data\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "mental_health_db",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql pizza tablas vistas')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "create view DLW.v_orderDetails \nAS\nselect * FROM \nOPENROWSET (\nBULK 'abfss://container02@dls01project.dfs.core.windows.net/pizzas/order_details.csv',\n--data_source = 'EDS_pizza',\nFORMAT = 'csv',\nPARSER_VERSION = '2.0',\nHEADER_ROW = TRUE\n) as fct;\nGO\n\n\ncreate view DLW.v_orders \nAS\nselect * FROM \nOPENROWSET (\nBULK 'abfss://container02@dls01project.dfs.core.windows.net/pizzas/orders.csv',\n--data_source = 'EDS_pizza',\nFORMAT = 'csv',\nPARSER_VERSION = '2.0',\nHEADER_ROW = TRUE\n) as fct;\nGO\n\n\ncreate view DLW.v_pizzaTypes\nAS\nselect * FROM \nOPENROWSET (\nBULK 'abfss://container02@dls01project.dfs.core.windows.net/pizzas/pizza_types.csv',\n--data_source = 'EDS_pizza',\nFORMAT = 'csv',\nPARSER_VERSION = '2.0',\nHEADER_ROW = TRUE\n) as fct;\nGO\n\n\ncreate view DLW.v_pizzas\nAS\nselect * FROM \nOPENROWSET (\nBULK 'abfss://container02@dls01project.dfs.core.windows.net/pizzas/pizzas.csv',\n--data_source = 'EDS_pizza',\nFORMAT = 'csv',\nPARSER_VERSION = '2.0',\nHEADER_ROW = TRUE\n) as fct;\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "pizza_db",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Creating an unmanaged Spark Table')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "6dcc49be-f674-4c0a-9904-4bd789efa4e4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"8a6093a1-6d2d-42fb-a6cb-fd9b13165e54": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "Bangalore",
												"1": "10540000"
											},
											{
												"0": "Beijing",
												"1": "21540000"
											},
											{
												"0": "San Francisco",
												"1": "881549"
											},
											{
												"0": "Seattle",
												"1": "730400"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "name",
												"type": "string"
											},
											{
												"key": "1",
												"name": "population",
												"type": "int"
											}
										]
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"1"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Creating an unmanaged (external) Spark table\n",
							"This notebook describes how to create an unmanaged (also known as external) table from Spark. \n",
							"The table is created in /datalake/cities which may exist already (so you can attach to existing data) it can be created when you insert data."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"CREATE TABLE cities (name STRING, population INT) USING PARQUET  LOCATION \\'/datalake/cities\\' OPTIONS (\\'compression\\'=\\'snappy\\')\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"source": [
							"Insert a few rows into the table using a list of values.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"INSERT INTO cities VALUES (\\'Seattle\\', 730400), (\\'San Francisco\\', 881549), (\\'Beijing\\', 21540000), (\\'Bangalore\\', 10540000)\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"* Retrieve values back. Click on 'Chart' below to review the visualization.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"name"
									],
									"values": [
										"population"
									],
									"yLabel": "population",
									"xLabel": "name",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"population\":{\"Bangalore\":21080000,\"Beijing\":43080000,\"San Francisco\":1763098,\"Seattle\":1460800}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"display(spark.sql(\"SELECT * FROM cities ORDER BY name\"))"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"Drop the table. Please note the data will remain in the data lake.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"DROP TABLE cities\")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "project01Spark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c93c788c-8feb-4c63-bf72-77530fc431b9"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/d62abf11-8ec7-4b7d-bb7d-228c0c4762b4/resourceGroups/Project01/providers/Microsoft.Synapse/workspaces/project01erick/bigDataPools/project01Spark",
						"name": "project01Spark",
						"type": "Spark",
						"endpoint": "https://project01erick.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/project01Spark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://container03@dls01project.dfs.core.windows.net/insurance_data/insurance.csv', format='csv', header=True)\r\n",
							"## If header exists uncomment line below\r\n",
							"\r\n",
							"df.write.mode(\"overwrite\").saveAsTable(\"default.InsuranceSpark\")"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook_Insure')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "project01Spark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "26e3d320-c3f1-4828-91be-7d38c1fbbe3e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/d62abf11-8ec7-4b7d-bb7d-228c0c4762b4/resourceGroups/Project01/providers/Microsoft.Synapse/workspaces/project01erick/bigDataPools/project01Spark",
						"name": "project01Spark",
						"type": "Spark",
						"endpoint": "https://project01erick.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/project01Spark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import pandas as pd\r\n",
							"import matplotlib.pyplot as plt\r\n",
							"import seaborn as sns"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### **Data Load**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://container03@dls01project.dfs.core.windows.net/insurance_data/insurance.csv', format='csv', header=True)\r\n",
							"## If header exists uncomment line below \r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://container03@dls01project.dfs.core.windows.net/insurance_data/insurance.csv', format='csv', header=True)\r\n",
							"## If header exists uncomment line below\r\n",
							"\r\n",
							"df.write.mode(\"overwrite\").saveAsTable(\"default.InsuranceSpark\")"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_pd = df.toPandas()\r\n",
							"df_pd"
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### **Data Cleaning**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_pd.info()"
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_pd.isnull().sum()"
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_pd = df_pd.drop(columns='index',axis=1)\r\n",
							"df_pd"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_pd.dropna(inplace=True)\r\n",
							"df_pd"
						],
						"outputs": [],
						"execution_count": 47
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_pd.duplicated().sum()"
						],
						"outputs": [],
						"execution_count": 48
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_pd = df_pd.set_index('PatientID')\r\n",
							"df_pd\r\n",
							"# print(df_pd.set_index('PatientID'))"
						],
						"outputs": [],
						"execution_count": 49
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_pd[['age','children']] = df_pd[['age','children']].astype(float).astype(int)\r\n",
							"df_pd[['bmi','bloodpressure','claim']] = df_pd[['bmi','bloodpressure','claim']].astype(float)\r\n",
							"df_pd"
						],
						"outputs": [],
						"execution_count": 50
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_pd.info()"
						],
						"outputs": [],
						"execution_count": 51
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_pd.head(5)"
						],
						"outputs": [],
						"execution_count": 52
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mx_age=df_pd['age'].max()\r\n",
							"mn_age=df_pd['age'].min()\r\n",
							"print(mx_age, mn_age)"
						],
						"outputs": [],
						"execution_count": 53
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"age_range = [18,25,41,57,60]\r\n",
							"age_labels = ['Gen Z','Millennials', 'Gen X', 'Baby Boomers']\r\n",
							"df_pd['age_group'] =  pd.cut(df_pd['age'], age_range,labels=age_labels)\r\n",
							"# ageGroup = df_pd[['age_group', 'claim']].groupby('age_group').mean().sort_values(by=\"claim\", ascending=True)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 54
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mx_bmi=df_pd['bmi'].max()\r\n",
							"mn_bmi=df_pd['bmi'].min()\r\n",
							"print(mn_bmi, mx_bmi)"
						],
						"outputs": [],
						"execution_count": 55
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"bmi_range = [15.5,18.5,24.9,29.9,60]\r\n",
							"bmi_labels = ['Underweight','Healthy Weight', 'Overweight', 'Obese']\r\n",
							"df_pd['bmi_group'] = pd.cut(df_pd['bmi'], bmi_range, labels=bmi_labels)"
						],
						"outputs": [],
						"execution_count": 56
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_pd[['bmi_group','bmi']]"
						],
						"outputs": [],
						"execution_count": 57
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_pd['bmi_group'].value_counts()"
						],
						"outputs": [],
						"execution_count": 58
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"bloodpressure_range = [71,120,129,139,148]\r\n",
							"bloodpressure_labels = ['Normal', 'Elevated', 'Hypertension Stage 1','Hypertension Stage 2']\r\n",
							"df_pd['bloodpressure_group'] = pd.cut(df_pd['bloodpressure'], bloodpressure_range, labels = bloodpressure_labels)"
						],
						"outputs": [],
						"execution_count": 59
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_pd  = df_pd[['gender','age','age_group', 'bmi','bmi_group', 'bloodpressure', 'bloodpressure_group','diabetic', 'children',\r\n",
							"       'smoker', 'region', 'claim' ]]\r\n",
							"\r\n",
							"df_pd"
						],
						"outputs": [],
						"execution_count": 60
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### **Visualization**"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### **Claims by Region**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"plt.figure(figsize = (12,8))\r\n",
							"sns.set_palette('pastel')\r\n",
							"plt.title(\"Claims by Region\" ,color = 'DarkBlue',fontsize=14)\r\n",
							"df_pd['region'].value_counts().plot(kind='pie', autopct='%1.1f%%')\r\n",
							"plt.show()\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 61
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### Patients in the Southeast with the 33.2% and Northwest with 25.9% received the highest number of health insurance claims."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### **Claims per Age Group**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"plt.figure(figsize = (12,8))\r\n",
							"sns.set_palette('pastel')\r\n",
							"plt.title(\"Claims per Age Group\" ,color = 'DarkBlue',fontsize=14)\r\n",
							"df_pd['age_group'].value_counts().plot(kind='pie', autopct='%1.1f%%')\r\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 62
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### Millennials are the 45.4% of the total and received the most health insurance claims."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### **BMI Ranges**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# plt.pie(df_pd['bmi_group'].value_counts(), autopct='%1.1f%%')\r\n",
							"\r\n",
							"\r\n",
							"plt.figure(figsize = (12,8))\r\n",
							"df_pd['bmi_group'].value_counts().plot(kind='pie', autopct='%1.1f%%')\r\n",
							"plt.title('BMI Range',color = 'DarkBlue',fontsize=14)"
						],
						"outputs": [],
						"execution_count": 63
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"plt.figure(figsize=(10,6))\r\n",
							"plt.title(\"BMI and Claim Amount\",fontsize=14, color='DarkBlue')\r\n",
							"plt.xlabel('BMI',fontsize=12,color='DarkBlue')\r\n",
							"plt.ylabel('Claim',fontsize=12,color='DarkBlue')\r\n",
							"sns.scatterplot(x=df_pd['bmi'], y=df_pd['claim'])"
						],
						"outputs": [],
						"execution_count": 64
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Set the width and height of the figure\r\n",
							"plt.figure(figsize=(10,6))\r\n",
							"plt.title(\"BMI Claims\",fontsize=14, color='DarkBlue')\r\n",
							"sns.barplot(x=df_pd.bmi_group, y=df_pd['claim'])\r\n",
							"plt.xlabel('BMI Groups',fontsize=12,color='DarkBlue')\r\n",
							"plt.ylabel('Claim Amounts',fontsize=12,color='DarkBlue')"
						],
						"outputs": [],
						"execution_count": 65
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### The majority of patients receiving health insurance claims are obese with the 52.7%. The cost of the claims for patients obese  ranges broadly from less than 12,000 to above 60,000."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### **Gender by Region**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"plt.figure(figsize = (10,6))\r\n",
							"plt.title(\"Gender by Region\", fontsize=14, color='DarkBlue')\r\n",
							"sns.countplot(x = 'gender', hue = 'region', data = df_pd)\r\n",
							"plt.xlabel('Gender',fontsize=12,color='DarkBlue')\r\n",
							"# plt.ylabel('Total',fontsize=12,color='DarkBlue')"
						],
						"outputs": [],
						"execution_count": 66
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### In the Southeast region, females filed slightly more claims than males. There is a substantial disparity in the number of claims between the Southeast and Northeast regions."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### **Correlations**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"plt.figure(figsize = (10,6))\r\n",
							"\r\n",
							"plt.subplot(1,2,1)\r\n",
							"plt.title(\"Correlation between Generation and BMI\", color = 'DarkRed')\r\n",
							"sns.countplot(x ='age_group', hue = 'bmi_group', data = df_pd)\r\n",
							"plt.ylabel('Count',fontsize=12,color='DarkRed')\r\n",
							"plt.xlabel('Age Group',fontsize=12,color='DarkRed')\r\n",
							"\r\n",
							"plt.subplot(1,2,2)\r\n",
							"plt.title(\"Correlation between Blood Pressure and Generation\", color = 'DarkBlue')\r\n",
							"sns.countplot(x = 'age_group', hue = 'bloodpressure_group', data = df_pd)\r\n",
							"plt.ylabel('Count',fontsize=12,color='DarkBlue')\r\n",
							"plt.xlabel('Age Group',fontsize=12,color='DarkBlue')\r\n",
							"\r\n",
							"# plt.xlabel('Count',fontsize=12,color='DarkRed')\r\n",
							"# plt.ylabel('Age Group',fontsize=12,color='DarkRed')"
						],
						"outputs": [],
						"execution_count": 67
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"According to USC Libraries, the following list of years are ascribed to generational age groups: Gen Z 1995 - 2010, Millennials 1977-1995, Gen X 1965-1976 and Baby Boomers 1946-1964.\r\n",
							"\r\n",
							"Heart.org lists the systolic mm Hg, (upper number) blood pressure ranges less than 120 as normal, 120-129 elevated, 130 -139 High Blood Pressure (Hypertension) Stage 1, 140 or higher High Blood Pressure (Hypertension) Stage 2, higher than 180 Hypertensive crisis. The data set did not include any patients that experienced a hypertensive crisis.\r\n",
							"\r\n",
							"There are significantly more obese patients that are millennials than any other age group. The majority of millennials have normal blood pressure ranges. However, millennials have more elevated blood pressure and hypertension stage 1 blood pressure ranges than any other age group."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"plt.figure(figsize = (10,6))\r\n",
							"plt.subplot(1,2,1)\r\n",
							"sns.countplot(x = 'age_group', hue = 'gender', data = df_pd)\r\n",
							"plt.ylabel('Gender Count',fontsize=12,color='DarkRed')\r\n",
							"plt.xlabel('Age Group',fontsize=12,color='DarkRed')\r\n",
							"\r\n",
							"plt.subplot(1,2,2)\r\n",
							"sns.countplot(x ='age_group', hue = 'diabetic', data = df_pd)\r\n",
							"plt.ylabel('Diabetic Count',fontsize=12,color='DarkBlue')\r\n",
							"plt.xlabel('Age Group',fontsize=12,color='DarkBlue')\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 68
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Millennial males and females received a higher proportion of claims than any other age group. While a significant number of claim recipients are diabetic, there is a very small variance between diabetic and non-diabetic across all age groups."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"plt.figure(figsize = (10,5))\r\n",
							"plt.subplot(1,2,1)\r\n",
							"sns.countplot(x = 'age_group', hue = 'region', data = df_pd)\r\n",
							"plt.ylabel('Region Count',fontsize=12,color='DarkRed')\r\n",
							"plt.xlabel('Age Group',fontsize=12,color='DarkRed')\r\n",
							"\r\n",
							"plt.subplot(1,2,2)\r\n",
							"sns.countplot( x = 'age_group', hue = 'smoker', data = df_pd)\r\n",
							"plt.ylabel('Smoker Count',fontsize=12,color='DarkBlue')\r\n",
							"plt.xlabel('Age Group',fontsize=12,color='DarkBlue')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 69
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Throughout the United States, millennials received the majority of health insurance claims. The majority of claim recipients were non-smokers."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# plt.subplot(#Total number of rows, total number of columns, plot number)\r\n",
							"plt.figure(figsize = (10,5))\r\n",
							"\r\n",
							"# Add title \r\n",
							"plt.title(\"Correlation of Generations and Children\", fontsize=15, color='DarkBlue')\r\n",
							"\r\n",
							"# Bar chart showing correlation between age groups and generations\r\n",
							"sns.countplot( x = 'age_group', hue = 'children', data = df_pd)\r\n",
							"\r\n",
							"\r\n",
							"plt.ylabel('Children Count',fontsize=12,color='DarkBlue')\r\n",
							"plt.xlabel('Age Group',fontsize=12,color='DarkBlue')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 70
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Millenials are parents to the highest number of childern under the age of 18 years old."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"plt.figure(figsize=(10,6))\r\n",
							"\r\n",
							"# Add title\r\n",
							"plt.title(\" Claim Amount per Age Group\")\r\n",
							"sns.barplot(x=df_pd.region, y=df_pd['claim'])\r\n",
							"\r\n",
							"plt.ylabel('Claim Amount',fontsize=12,color='DarkBlue')\r\n",
							"plt.xlabel('Region',fontsize=12,color='DarkBlue')"
						],
						"outputs": [],
						"execution_count": 74
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"The average claim amount is highest in the Northeast."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"plt.figure(figsize=(10,6))\r\n",
							"\r\n",
							"# Add title\r\n",
							"plt.title(\"Blood Pressure Claims per Region\",fontsize=15, color='DarkBlue')\r\n",
							"\r\n",
							"# Bar chart showing blood pressure claims by region\r\n",
							"sns.barplot(x=df_pd.bloodpressure, y=df_pd['region'])\r\n",
							"\r\n",
							"plt.ylabel('Region',fontsize=12,color='DarkBlue')\r\n",
							"plt.xlabel('BloodPressure',fontsize=12,color='DarkBlue')"
						],
						"outputs": [],
						"execution_count": 76
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Patients in the Southeast and Northeast have the highest blood pressure. However, blood pressure less than 120 is classified as normal."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**Problems**\r\n",
							"Patients in the Southeast experience significantly higher claim rates compared to other regions. Most of these claims are from millennials. Obesity is a common factor among claim recipients. This is concerning because millennials are the primary parents of children under 18. If this trend persists, future generations may face obesity-related health issues and increased medical expenses.\r\n",
							"\r\n",
							"**Solutions**\r\n",
							"The CDC recommends 40 to 50 hours of annual nutritional education to promote positive behavior change. However, U.S. students currently receive less than 8 hours of nutritional education per year. School administrators and teachers play a crucial role in shaping the future. Opportunities to teach healthy lifestyles exist across all grades, including integrating math with counting fruits and vegetables, establishing school gardens, and introducing appealing nutritious food options in cafeterias. These efforts can help children learn to eat for sustenance rather than indulgence.\r\n",
							"\r\n",
							"**Next Steps**\r\n",
							"State and local government officials should collaborate with school administrators to ensure that schools have the necessary resources for teaching healthy eating habits. Teachers should involve their students when designing lessons focused on healthy lifestyles. Additionally, some activities and events can be structured to involve the entire family. These actions will set millennials and their children on a path toward better health outcomes."
						]
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Read and write data from Azure Data Lake Storage Gen2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "8c4d1426-671e-4c54-8e5f-6a55c4b44c9a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Access data on Azure Data Lake Storage Gen2 (ADLS Gen2) with Synapse Spark\n",
							"\n",
							"Azure Data Lake Storage Gen2 (ADLS Gen2) is used as the storage account associated with a Synapse workspace. A synapse workspace can have a default ADLS Gen2 storage account and additional linked storage accounts. \n",
							"\n",
							"You can access data on ADLS Gen2 with Synapse Spark via following URL:\n",
							"    \n",
							"    abfss://<container_name>@<storage_account_name>.dfs.core.windows.net/<path>\n",
							"\n",
							"This notebook provides examples of how to read data from ADLS Gen2 account into a Spark context and how to write the output of Spark jobs directly into an ADLS Gen2 location.\n",
							"\n",
							"## Pre-requisites\n",
							"Synapse leverage AAD pass-through to access any ADLS Gen2 account (or folder) to which you have a **Blob Storage Contributor** permission. No credentials or access token is required. "
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Load a sample data\n",
							"\n",
							"Let's first load the [public holidays](https://azure.microsoft.com/en-us/services/open-datasets/catalog/public-holidays/) of last 6 months from Azure Open datasets as a sample."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.opendatasets import PublicHolidays\n",
							"\n",
							"from datetime import datetime\n",
							"from dateutil import parser\n",
							"from dateutil.relativedelta import relativedelta\n",
							"\n",
							"\n",
							"end_date = datetime.today()\n",
							"start_date = datetime.today() - relativedelta(months=6)\n",
							"hol = PublicHolidays(start_date=start_date, end_date=end_date)\n",
							"hol_df = hol.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"# Display 5 rows\n",
							"hol_df.show(5, truncate = False)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Write data to the default ADLS Gen2 storage\n",
							"\n",
							"We are going to write the spark dateframe to your default ADLS Gen2 storage account.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql.types import *\n",
							"\n",
							"# Primary storage info\n",
							"account_name = 'fill in your primary account name' # fill in your primary account name\n",
							"container_name = 'fill in your container name' # fill in your container name\n",
							"relative_path = 'fill in your relative folder path' # fill in your relative folder path\n",
							"\n",
							"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path)\n",
							"print('Primary storage account path: ' + adls_path)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Save a dataframe as Parquet, JSON or CSV\n",
							"If you have a dataframe, you can save it to Parquet or JSON with the .write.parquet(), .write.json() and .write.csv() methods respectively.\n",
							"\n",
							"Dataframes can be saved in any format, regardless of the input format.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"parquet_path = adls_path + 'holiday.parquet'\n",
							"json_path = adls_path + 'holiday.json'\n",
							"csv_path = adls_path + 'holiday.csv'\n",
							"print('parquet file path: ' + parquet_path)\n",
							"print('json file path： ' + json_path)\n",
							"print('csv file path: ' + csv_path)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"source": [
							"hol_df.write.parquet(parquet_path, mode = 'overwrite')\n",
							"hol_df.write.json(json_path, mode = 'overwrite')\n",
							"hol_df.write.csv(csv_path, mode = 'overwrite', header = 'true')"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Save a dataframe as text files\n",
							"If you have a dataframe that you want ot save as text file, you must first covert it to an RDD and then save that RDD as a text file.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Define the text file path\n",
							"text_path = adls_path + 'holiday.txt'\n",
							"print('text file path: ' + text_path)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"source": [
							"# Covert spark dataframe into RDD \n",
							"hol_RDD = hol_df.rdd\n",
							"type(hol_RDD)"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"source": [
							"If you have an RDD, you can convert it to a text file like the following:\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							" # Save RDD as text file\n",
							"hol_RDD.saveAsTextFile(text_path)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"source": [
							"# Read data from the default ADLS Gen2 storage\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Create a dataframe from parquet files\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df_parquet = spark.read.parquet(parquet_path)"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Create a dataframe from JSON files\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df_json = spark.read.json(json_path)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Create a dataframe from CSV files\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df_csv = spark.read.csv(csv_path, header = 'true')"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Create an RDD from text file\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"text = sc.textFile(text_path)"
						],
						"outputs": [],
						"execution_count": 17
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/new_db_data_lake')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "new_db_data_lake",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://container01@dls01project.dfs.core.windows.net/",
								"Properties": {
									"FormatType": "csv",
									"LinkedServiceName": "project01erick-WorkspaceDefaultStorage"
								}
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "a10e6583-e2b7-4f46-af7e-88bc72e36cb1"
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/project01pool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "brazilsouth"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/project01Spark')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 5,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "brazilsouth"
		}
	]
}